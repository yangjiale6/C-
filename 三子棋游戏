//测试三子棋游戏test.cpp
#include<stdio.h>
#include "game.h"
void menu()
{
	printf("**********************************\n");
	printf("**** 1.play    0. exit************\n");
	printf("**********************************\n");
}
void game()
{
	char ret = 0;
	//数组存放走进的棋盘信息
	char board[ROW][COL]={0};//全部空格
	//初始化棋盘
	IntiBoard(board, ROW, COL);
	//打印棋盘
	
	//下棋
	while (1)
	{
		//玩家下棋
		Playermore(board, ROW, COL);
		DisplayBoard(board, ROW, COL);
		//判断玩家是否赢
		ret = Iswin(board, ROW, COL);
		if (ret != 'c')
		{
			break;
		}
		//电脑下棋
		ComputerMove(board, ROW, COL);
		DisplayBoard(board, ROW, COL);
		//电脑是否赢
		ret = Iswin(board, ROW, COL);
		if (ret != 'c')
		{
			break;
		}
	}
		 if (ret == '*')
		{
			printf("玩家赢\n");
		}
		else if (ret == '#')
		{
			printf("电脑赢\n");
		}
		else if(ret=='Q')
		{
			 printf("平局\n");
		}
	}

void test()
{
	int input = 0;
	srand((unsigned int)time(NULL));
	do
	{
		menu();
		printf("请选择：》");
		scanf_s("%d", &input);
		switch (input)
		{
		case 1:
			game();
			printf("三子棋\n");
			break;
		case 0:
			printf("退出游戏\n");
			break;
		default:
			printf("选择错误，请重新选择！\n");
			break;
		}
	} 
	while (input);
}
int main()
{
	test();
	return 0;
}
//game.c
#include"game.h"
#include<stdio.h>

void IntiBoard(char board[ROW][COL], int row, int col)
{
	int i = 0;
	int j = 0;
	for (i = 0; i < row; i++)
	{
		for (j = 0; j < col; j++)
		{
			board[i][j] = ' ';
		}
	}

}
void DisplayBoard(char board[ROW][COL], int row, int col)
{
	int i = 0;
	for (i = 0; i < row; i++)
	{
		int j = 0;
		for (j = 0; j < col; j++)
		{
			//打印一行数据
		printf(" %c ",board[i][j]);
		if (j < col - 1)
			printf("|");
		}
		printf("\n");

		//打印分割行
		if (i < row - 1)
		{
			for (j = 0; j < col; j++)
			{
				printf("---");
				if (j < col - 1)
					printf("|");
			}
			
		}printf("\n");


		
	}
}
void Playermore(char board[ROW][COL], int row, int col)
{
	int x = 0;
	int y = 0;
	printf("玩家走:>\n");
	printf("请输入要下的坐标：>");
	while (1)
	{
		scanf_s("%d%d", &x, &y);
		//判断x，y坐标的合法性
		if (x >= 1 && x <= row && y >= 1 && y <= col)
		{
			if (board[x - 1][y - 1] == ' ')
			{
				board[x - 1][y - 1] = '*';
				break;
			}
			else
			{
				printf("该坐标被占用\n");
			}
		}
		else
		{
			printf("坐标非法，请重新输入！\n");

		}
	}
}
void ComputerMove(char board[ROW][COL], int row, int col)
{
	int x = 0;
	int y = 0;
	printf("电脑走：>\n");
	while (1)
	{
		x = rand() % row;
		y = rand() % col;
		if (board[x][y] == ' ')
		{
			board[x][y] = '#';
			break;
		}
		

		
	}
}
int Isfull(char board[ROW][COL], int row, int col)
{
	int i = 0;
	int j = 0;
	for (i = 0; i < row; i++)
	{
		for (j = 0; j < col; j++)
		{
			if (board[i][j] == ' ')
				return 0;//没满
		}
	}
}
char Iswin(char board[ROW][COL], int row, int col)
{
	int i = 0;
	//横三行
		for (i = 0; i < row; i++)
		{
			if (board[i][0] == board[i][1] && board[i][1] == board[i][2] && board[i][1] != ' ')
			{
				return board[i][1];
			}
		}
		//竖三列
		for (i = 0; i<col;i++)
		{
			if (board[0][i] == board[1][i] && board[1][i] == board[2][i] & board[1][i]!=' ')
			{
				return board[1][i];
			}
		}
		if (board[0][0] == board[1][1] && board[1][1] == board[2][2] && board[1][1] != ' ')
			return board[1][1];
		if (board[2][0] == board[1][1] && board[1][1] == board[0][2] && board[1][1] != ' ')
			return board[1][1];
		//判断是否平局
		if (1 == Isfull(board, ROW, COL))
		{
			return 'Q';
		}
		return 'c';
}
//game.h
#pragma once
#define ROW 3
#define COL 3
#include<stdlib.h>
#include<time.h>

void IntiBoard(char board[ROW][COL], int row, int col);
void DisplayBoard(char board[ROW][COL], int row, int col);
void Playermore(char board[ROW][COL], int row, int col);
void ComputerMove(char board[ROW][COL],int row,int col);
//告诉我们谁赢
//玩家赢
char Iswin(char board[ROW][COL], int row, int col);
